// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `src/protos/mobile_model.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mobile.Car)
pub struct Car {
    // message fields
    // @@protoc_insertion_point(field:mobile.Car.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:mobile.Car.make)
    pub make: ::std::string::String,
    // @@protoc_insertion_point(field:mobile.Car.model)
    pub model: ::std::string::String,
    // @@protoc_insertion_point(field:mobile.Car.variant)
    pub variant: ::std::string::String,
    // @@protoc_insertion_point(field:mobile.Car.engine)
    pub engine: ::std::string::String,
    // @@protoc_insertion_point(field:mobile.Car.production_date)
    pub production_date: ::std::string::String,
    // @@protoc_insertion_point(field:mobile.Car.phone)
    pub phone: ::std::string::String,
    // @@protoc_insertion_point(field:mobile.Car.power)
    pub power: i32,
    // @@protoc_insertion_point(field:mobile.Car.gear_type)
    pub gear_type: ::std::string::String,
    // @@protoc_insertion_point(field:mobile.Car.miliage)
    pub miliage: i32,
    // @@protoc_insertion_point(field:mobile.Car.view_counter)
    pub view_counter: i32,
    // @@protoc_insertion_point(field:mobile.Car.price)
    pub price: i32,
    // @@protoc_insertion_point(field:mobile.Car.currency)
    pub currency: ::std::string::String,
    // @@protoc_insertion_point(field:mobile.Car.emission)
    pub emission: ::std::string::String,
    // @@protoc_insertion_point(field:mobile.Car.registraion)
    pub registraion: bool,
    // @@protoc_insertion_point(field:mobile.Car.extras)
    pub extras: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:mobile.Car.color)
    pub color: ::std::string::String,
    // @@protoc_insertion_point(field:mobile.Car.created_on)
    pub created_on: ::std::string::String,
    // @@protoc_insertion_point(field:mobile.Car.updated_on)
    pub updated_on: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:mobile.Car.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Car {
    fn default() -> &'a Car {
        <Car as ::protobuf::Message>::default_instance()
    }
}

impl Car {
    pub fn new() -> Car {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(19);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &Car| { &m.id },
            |m: &mut Car| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "make",
            |m: &Car| { &m.make },
            |m: &mut Car| { &mut m.make },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "model",
            |m: &Car| { &m.model },
            |m: &mut Car| { &mut m.model },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "variant",
            |m: &Car| { &m.variant },
            |m: &mut Car| { &mut m.variant },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "engine",
            |m: &Car| { &m.engine },
            |m: &mut Car| { &mut m.engine },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "production_date",
            |m: &Car| { &m.production_date },
            |m: &mut Car| { &mut m.production_date },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "phone",
            |m: &Car| { &m.phone },
            |m: &mut Car| { &mut m.phone },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "power",
            |m: &Car| { &m.power },
            |m: &mut Car| { &mut m.power },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "gear_type",
            |m: &Car| { &m.gear_type },
            |m: &mut Car| { &mut m.gear_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "miliage",
            |m: &Car| { &m.miliage },
            |m: &mut Car| { &mut m.miliage },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "view_counter",
            |m: &Car| { &m.view_counter },
            |m: &mut Car| { &mut m.view_counter },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "price",
            |m: &Car| { &m.price },
            |m: &mut Car| { &mut m.price },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "currency",
            |m: &Car| { &m.currency },
            |m: &mut Car| { &mut m.currency },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "emission",
            |m: &Car| { &m.emission },
            |m: &mut Car| { &mut m.emission },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "registraion",
            |m: &Car| { &m.registraion },
            |m: &mut Car| { &mut m.registraion },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "extras",
            |m: &Car| { &m.extras },
            |m: &mut Car| { &mut m.extras },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "color",
            |m: &Car| { &m.color },
            |m: &mut Car| { &mut m.color },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "created_on",
            |m: &Car| { &m.created_on },
            |m: &mut Car| { &mut m.created_on },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "updated_on",
            |m: &Car| { &m.updated_on },
            |m: &mut Car| { &mut m.updated_on },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Car>(
            "Car",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Car {
    const NAME: &'static str = "Car";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                18 => {
                    self.make = is.read_string()?;
                },
                26 => {
                    self.model = is.read_string()?;
                },
                34 => {
                    self.variant = is.read_string()?;
                },
                42 => {
                    self.engine = is.read_string()?;
                },
                50 => {
                    self.production_date = is.read_string()?;
                },
                58 => {
                    self.phone = is.read_string()?;
                },
                64 => {
                    self.power = is.read_int32()?;
                },
                74 => {
                    self.gear_type = is.read_string()?;
                },
                80 => {
                    self.miliage = is.read_int32()?;
                },
                88 => {
                    self.view_counter = is.read_int32()?;
                },
                96 => {
                    self.price = is.read_int32()?;
                },
                106 => {
                    self.currency = is.read_string()?;
                },
                114 => {
                    self.emission = is.read_string()?;
                },
                120 => {
                    self.registraion = is.read_bool()?;
                },
                130 => {
                    self.extras.push(is.read_string()?);
                },
                138 => {
                    self.color = is.read_string()?;
                },
                146 => {
                    self.created_on = is.read_string()?;
                },
                154 => {
                    self.updated_on = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.make.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.make);
        }
        if !self.model.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.model);
        }
        if !self.variant.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.variant);
        }
        if !self.engine.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.engine);
        }
        if !self.production_date.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.production_date);
        }
        if !self.phone.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.phone);
        }
        if self.power != 0 {
            my_size += ::protobuf::rt::int32_size(8, self.power);
        }
        if !self.gear_type.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.gear_type);
        }
        if self.miliage != 0 {
            my_size += ::protobuf::rt::int32_size(10, self.miliage);
        }
        if self.view_counter != 0 {
            my_size += ::protobuf::rt::int32_size(11, self.view_counter);
        }
        if self.price != 0 {
            my_size += ::protobuf::rt::int32_size(12, self.price);
        }
        if !self.currency.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.currency);
        }
        if !self.emission.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.emission);
        }
        if self.registraion != false {
            my_size += 1 + 1;
        }
        for value in &self.extras {
            my_size += ::protobuf::rt::string_size(16, &value);
        };
        if !self.color.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.color);
        }
        if !self.created_on.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.created_on);
        }
        if !self.updated_on.is_empty() {
            my_size += ::protobuf::rt::string_size(19, &self.updated_on);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.make.is_empty() {
            os.write_string(2, &self.make)?;
        }
        if !self.model.is_empty() {
            os.write_string(3, &self.model)?;
        }
        if !self.variant.is_empty() {
            os.write_string(4, &self.variant)?;
        }
        if !self.engine.is_empty() {
            os.write_string(5, &self.engine)?;
        }
        if !self.production_date.is_empty() {
            os.write_string(6, &self.production_date)?;
        }
        if !self.phone.is_empty() {
            os.write_string(7, &self.phone)?;
        }
        if self.power != 0 {
            os.write_int32(8, self.power)?;
        }
        if !self.gear_type.is_empty() {
            os.write_string(9, &self.gear_type)?;
        }
        if self.miliage != 0 {
            os.write_int32(10, self.miliage)?;
        }
        if self.view_counter != 0 {
            os.write_int32(11, self.view_counter)?;
        }
        if self.price != 0 {
            os.write_int32(12, self.price)?;
        }
        if !self.currency.is_empty() {
            os.write_string(13, &self.currency)?;
        }
        if !self.emission.is_empty() {
            os.write_string(14, &self.emission)?;
        }
        if self.registraion != false {
            os.write_bool(15, self.registraion)?;
        }
        for v in &self.extras {
            os.write_string(16, &v)?;
        };
        if !self.color.is_empty() {
            os.write_string(17, &self.color)?;
        }
        if !self.created_on.is_empty() {
            os.write_string(18, &self.created_on)?;
        }
        if !self.updated_on.is_empty() {
            os.write_string(19, &self.updated_on)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Car {
        Car::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.make.clear();
        self.model.clear();
        self.variant.clear();
        self.engine.clear();
        self.production_date.clear();
        self.phone.clear();
        self.power = 0;
        self.gear_type.clear();
        self.miliage = 0;
        self.view_counter = 0;
        self.price = 0;
        self.currency.clear();
        self.emission.clear();
        self.registraion = false;
        self.extras.clear();
        self.color.clear();
        self.created_on.clear();
        self.updated_on.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Car {
        static instance: Car = Car {
            id: ::std::string::String::new(),
            make: ::std::string::String::new(),
            model: ::std::string::String::new(),
            variant: ::std::string::String::new(),
            engine: ::std::string::String::new(),
            production_date: ::std::string::String::new(),
            phone: ::std::string::String::new(),
            power: 0,
            gear_type: ::std::string::String::new(),
            miliage: 0,
            view_counter: 0,
            price: 0,
            currency: ::std::string::String::new(),
            emission: ::std::string::String::new(),
            registraion: false,
            extras: ::std::vec::Vec::new(),
            color: ::std::string::String::new(),
            created_on: ::std::string::String::new(),
            updated_on: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Car {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Car").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Car {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Car {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1dsrc/protos/mobile_model.proto\x12\x06mobile\"\xfc\x03\n\x03Car\x12\
    \x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12\x12\n\x04make\x18\x02\x20\x01\
    (\tR\x04make\x12\x14\n\x05model\x18\x03\x20\x01(\tR\x05model\x12\x18\n\
    \x07variant\x18\x04\x20\x01(\tR\x07variant\x12\x16\n\x06engine\x18\x05\
    \x20\x01(\tR\x06engine\x12'\n\x0fproduction_date\x18\x06\x20\x01(\tR\x0e\
    productionDate\x12\x14\n\x05phone\x18\x07\x20\x01(\tR\x05phone\x12\x14\n\
    \x05power\x18\x08\x20\x01(\x05R\x05power\x12\x1b\n\tgear_type\x18\t\x20\
    \x01(\tR\x08gearType\x12\x18\n\x07miliage\x18\n\x20\x01(\x05R\x07miliage\
    \x12!\n\x0cview_counter\x18\x0b\x20\x01(\x05R\x0bviewCounter\x12\x14\n\
    \x05price\x18\x0c\x20\x01(\x05R\x05price\x12\x1a\n\x08currency\x18\r\x20\
    \x01(\tR\x08currency\x12\x1a\n\x08emission\x18\x0e\x20\x01(\tR\x08emissi\
    on\x12\x20\n\x0bregistraion\x18\x0f\x20\x01(\x08R\x0bregistraion\x12\x16\
    \n\x06extras\x18\x10\x20\x03(\tR\x06extras\x12\x14\n\x05color\x18\x11\
    \x20\x01(\tR\x05color\x12\x1d\n\ncreated_on\x18\x12\x20\x01(\tR\tcreated\
    On\x12\x1d\n\nupdated_on\x18\x13\x20\x01(\tR\tupdatedOnJ\xd7\x08\n\x06\
    \x12\x04\0\0\x18\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\
    \x03\x02\0\x0f\n\n\n\x02\x04\0\x12\x04\x04\0\x18\x01\n\n\n\x03\x04\0\x01\
    \x12\x03\x04\x08\x0b\n\x0b\n\x04\x04\0\x02\0\x12\x03\x05\x04\x12\n\x0c\n\
    \x05\x04\0\x02\0\x05\x12\x03\x05\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\
    \x03\x05\x0b\r\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x05\x10\x11\n\x0b\n\
    \x04\x04\0\x02\x01\x12\x03\x06\x04\x14\n\x0c\n\x05\x04\0\x02\x01\x05\x12\
    \x03\x06\x04\n\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x06\x0b\x0f\n\x0c\n\
    \x05\x04\0\x02\x01\x03\x12\x03\x06\x12\x13\n\x0b\n\x04\x04\0\x02\x02\x12\
    \x03\x07\x04\x15\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x07\x04\n\n\x0c\n\
    \x05\x04\0\x02\x02\x01\x12\x03\x07\x0b\x10\n\x0c\n\x05\x04\0\x02\x02\x03\
    \x12\x03\x07\x13\x14\n\x0b\n\x04\x04\0\x02\x03\x12\x03\x08\x04\x17\n\x0c\
    \n\x05\x04\0\x02\x03\x05\x12\x03\x08\x04\n\n\x0c\n\x05\x04\0\x02\x03\x01\
    \x12\x03\x08\x0b\x12\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x08\x15\x16\n\
    \x0b\n\x04\x04\0\x02\x04\x12\x03\t\x04\x16\n\x0c\n\x05\x04\0\x02\x04\x05\
    \x12\x03\t\x04\n\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\t\x0b\x11\n\x0c\n\
    \x05\x04\0\x02\x04\x03\x12\x03\t\x14\x15\n\x0b\n\x04\x04\0\x02\x05\x12\
    \x03\n\x04\x1f\n\x0c\n\x05\x04\0\x02\x05\x05\x12\x03\n\x04\n\n\x0c\n\x05\
    \x04\0\x02\x05\x01\x12\x03\n\x0b\x1a\n\x0c\n\x05\x04\0\x02\x05\x03\x12\
    \x03\n\x1d\x1e\n\x0b\n\x04\x04\0\x02\x06\x12\x03\x0b\x04\x15\n\x0c\n\x05\
    \x04\0\x02\x06\x05\x12\x03\x0b\x04\n\n\x0c\n\x05\x04\0\x02\x06\x01\x12\
    \x03\x0b\x0b\x10\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03\x0b\x13\x14\n\x0b\
    \n\x04\x04\0\x02\x07\x12\x03\x0c\x04\x14\n\x0c\n\x05\x04\0\x02\x07\x05\
    \x12\x03\x0c\x04\t\n\x0c\n\x05\x04\0\x02\x07\x01\x12\x03\x0c\n\x0f\n\x0c\
    \n\x05\x04\0\x02\x07\x03\x12\x03\x0c\x12\x13\n\x0b\n\x04\x04\0\x02\x08\
    \x12\x03\r\x04\x19\n\x0c\n\x05\x04\0\x02\x08\x05\x12\x03\r\x04\n\n\x0c\n\
    \x05\x04\0\x02\x08\x01\x12\x03\r\x0b\x14\n\x0c\n\x05\x04\0\x02\x08\x03\
    \x12\x03\r\x17\x18\n\x0b\n\x04\x04\0\x02\t\x12\x03\x0e\x04\x17\n\x0c\n\
    \x05\x04\0\x02\t\x05\x12\x03\x0e\x04\t\n\x0c\n\x05\x04\0\x02\t\x01\x12\
    \x03\x0e\n\x11\n\x0c\n\x05\x04\0\x02\t\x03\x12\x03\x0e\x14\x16\n\x0b\n\
    \x04\x04\0\x02\n\x12\x03\x0f\x04\x1c\n\x0c\n\x05\x04\0\x02\n\x05\x12\x03\
    \x0f\x04\t\n\x0c\n\x05\x04\0\x02\n\x01\x12\x03\x0f\n\x16\n\x0c\n\x05\x04\
    \0\x02\n\x03\x12\x03\x0f\x19\x1b\n\x0b\n\x04\x04\0\x02\x0b\x12\x03\x10\
    \x04\x15\n\x0c\n\x05\x04\0\x02\x0b\x05\x12\x03\x10\x04\t\n\x0c\n\x05\x04\
    \0\x02\x0b\x01\x12\x03\x10\n\x0f\n\x0c\n\x05\x04\0\x02\x0b\x03\x12\x03\
    \x10\x12\x14\n\x0b\n\x04\x04\0\x02\x0c\x12\x03\x11\x04\x19\n\x0c\n\x05\
    \x04\0\x02\x0c\x05\x12\x03\x11\x04\n\n\x0c\n\x05\x04\0\x02\x0c\x01\x12\
    \x03\x11\x0b\x13\n\x0c\n\x05\x04\0\x02\x0c\x03\x12\x03\x11\x16\x18\n\x0b\
    \n\x04\x04\0\x02\r\x12\x03\x12\x04\x19\n\x0c\n\x05\x04\0\x02\r\x05\x12\
    \x03\x12\x04\n\n\x0c\n\x05\x04\0\x02\r\x01\x12\x03\x12\x0b\x13\n\x0c\n\
    \x05\x04\0\x02\r\x03\x12\x03\x12\x16\x18\n\x0b\n\x04\x04\0\x02\x0e\x12\
    \x03\x13\x04\x1a\n\x0c\n\x05\x04\0\x02\x0e\x05\x12\x03\x13\x04\x08\n\x0c\
    \n\x05\x04\0\x02\x0e\x01\x12\x03\x13\t\x14\n\x0c\n\x05\x04\0\x02\x0e\x03\
    \x12\x03\x13\x17\x19\n\x0b\n\x04\x04\0\x02\x0f\x12\x03\x14\x04\x20\n\x0c\
    \n\x05\x04\0\x02\x0f\x04\x12\x03\x14\x04\x0c\n\x0c\n\x05\x04\0\x02\x0f\
    \x05\x12\x03\x14\r\x13\n\x0c\n\x05\x04\0\x02\x0f\x01\x12\x03\x14\x14\x1a\
    \n\x0c\n\x05\x04\0\x02\x0f\x03\x12\x03\x14\x1d\x1f\n\x0b\n\x04\x04\0\x02\
    \x10\x12\x03\x15\x04\x16\n\x0c\n\x05\x04\0\x02\x10\x05\x12\x03\x15\x04\n\
    \n\x0c\n\x05\x04\0\x02\x10\x01\x12\x03\x15\x0b\x10\n\x0c\n\x05\x04\0\x02\
    \x10\x03\x12\x03\x15\x13\x15\n\x0b\n\x04\x04\0\x02\x11\x12\x03\x16\x04\
    \x1b\n\x0c\n\x05\x04\0\x02\x11\x05\x12\x03\x16\x04\n\n\x0c\n\x05\x04\0\
    \x02\x11\x01\x12\x03\x16\x0b\x15\n\x0c\n\x05\x04\0\x02\x11\x03\x12\x03\
    \x16\x18\x1a\n\x0b\n\x04\x04\0\x02\x12\x12\x03\x17\x04\x1b\n\x0c\n\x05\
    \x04\0\x02\x12\x05\x12\x03\x17\x04\n\n\x0c\n\x05\x04\0\x02\x12\x01\x12\
    \x03\x17\x0b\x15\n\x0c\n\x05\x04\0\x02\x12\x03\x12\x03\x17\x18\x1ab\x06p\
    roto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(Car::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
